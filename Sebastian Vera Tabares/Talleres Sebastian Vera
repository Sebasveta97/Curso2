# ACTIVIDADES PROPUESTAS EN S1_C2

# PROBLEMA # 1
from keras.datasets import mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
my_slice = train_images[:,14:29,14:29]
print(my_slice.shape)

#PROBLEMA # 2
def maximo(a):
  return max(a)

array = [0,1,2,3,4,5,6,7,8,9]
maximo(array)

def max_array1D(arr): 
    max = arr[0] 
    for i in range(1, arr.shape[0]): 
        if arr[i] > max: 
            max = arr[i] 
    return max
    
# PROBLEMA # 3
class point:
  def __init__(self,x=0,y=0):
    self.coorx = x
    self.coory = y

  def traslate(self,dx,dy):
    self.x += dx
    self.y += dy

  def __str__(self):
    return("Point at [%f, %f]" % (self.x, self.y))
    
# RETO #1
# Se importa imshow para mostrar imagen
from google.colab.patches import cv2_imshow
# Se importa la libreria OpenCV
import cv2
#Se carga la imagen en escala de blancos y negros con imread
data = cv2.imread("Foto_zapato.jpeg",cv2.IMREAD_GRAYSCALE)
# Se cambia el tamaño para que nuestro modelo lo pueda leer
data = cv2.resize(data,(28,28))
cv2_imshow(data)

# Se carga modelo
from keras.datasets import fashion_mnist
from tensorflow import keras
fashion_mnist = keras.datasets.fashion_mnist
(X_train_full, y_train_full), (X_test, y_test) = fashion_mnist.load_data()

# Se normaliza los pixel para escala de blancos y negros
X_valid, X_train = X_train_full[:5000] / 255., X_train_full[5000:] / 255.
y_valid, y_train = y_train_full[:5000], y_train_full[5000:]
X_test = X_test / 255.


# Se realiza modelo
keras.backend.clear_session()

model = keras.models.Sequential();
model.add(keras.layers.Flatten(input_shape=[28, 28]));
model.add(keras.layers.Dense(300, activation="relu"));
model.add(keras.layers.Dense(100, activation="relu"));
model.add(keras.layers.Dense(10, activation="softmax"));

# Se calcula una predicción
y_pred = model.predict(data.reshape(1,28,28))
y_pred

